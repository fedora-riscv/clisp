--- src/errunix.d.orig	2017-02-24 10:37:24.000000000 -0700
+++ src/errunix.d	2017-02-24 10:41:33.217732236 -0700
@@ -94,7 +94,7 @@ global _Noreturn void OS_error_arg (obje
  > FILE: Filename (with quotation marks) as constant ASCIZ-String
  > LINE: line number */
 global void errno_out_low (int errorcode, const char* file, uintL line) {
-  fprintf(stderr,"\n[%s:%d] errno = %d", file, line, errorcode);
+  fprintf(stderr,"\n[%s:%" PRIul "] errno = %d", file, line, errorcode);
   var object code = ANSIC_error_code_converter(errorcode);
   if (symbolp(code)) { /* known name? */
     fputs(" (",stderr);
--- src/lispbibl.d.orig	2017-02-24 10:37:24.000000000 -0700
+++ src/lispbibl.d	2017-02-24 10:41:33.223732185 -0700
@@ -1013,7 +1013,7 @@
   #endif
   typedef unsigned char  UBYTE;
 #else
-  #error No 8 bit integer type? -- Which Interger-type has 8 Bit?
+  #error No 8 bit integer type? -- Which Integer-type has 8 Bit?
 #endif
 #if (short_bitsize==16)
   typedef short          SWORD;
@@ -1024,26 +1024,36 @@
 #if (long_bitsize==32)
   typedef long           SLONG;
   typedef unsigned long  ULONG;
+  #define PRIsl "ld"
+  #define PRIul "lu"
 #elif (int_bitsize==32)
   typedef int            SLONG;
   typedef unsigned int   ULONG;
+  #define PRIsl "d"
+  #define PRIul "u"
 #else
   #error No 32 bit integer type? -- Which Integer-type has 32 Bit?
 #endif
 #if (long_bitsize==64) && !defined(UNIX_CYGWIN32)
   typedef long           SLONGLONG;
   typedef unsigned long  ULONGLONG;
+  #define PRIsll "ld"
+  #define PRIull "lu"
   #ifndef HAVE_LONG_LONG_INT
   #define HAVE_LONG_LONG_INT
   #endif
 #elif defined(MICROSOFT)
   typedef __int64           SLONGLONG;
   typedef unsigned __int64  ULONGLONG;
+  #define PRIsll "I64d"
+  #define PRIull "I64u"
   #define HAVE_LONG_LONG_INT
 #elif defined(HAVE_LONG_LONG_INT)
  #if defined(long_long_bitsize) && (long_long_bitsize==64)
   typedef long long           SLONGLONG;
   typedef unsigned long long  ULONGLONG;
+  #define PRIsll "lld"
+  #define PRIull "llu"
  #else /* useless type */
   #undef HAVE_LONG_LONG_INT
  #endif
@@ -1685,10 +1695,14 @@ typedef unsigned_int_with_n_bits(intBWLs
 #if (intCsize==intWsize)
   #define dotimesC dotimesW
   #define dotimespC dotimespW
+  #define PRIuintC "hu"
+  #define PRIsintC "hd"
 #endif
 #if (intCsize==intLsize)
   #define dotimesC dotimesL
   #define dotimespC dotimespL
+  #define PRIuintC PRIul
+  #define PRIsintC PRIsl
 #endif
 /* Use 'uintC' for counters, which are small most of the time. */
 %% export_def(uintC);
--- src/spvw_debug.d.orig	2017-02-24 10:37:24.000000000 -0700
+++ src/spvw_debug.d	2017-02-24 10:41:33.224732176 -0700
@@ -81,7 +81,7 @@ local void nobject_out1 (FILE* out, obje
     fputc('"',out);
   } else if (charp(obj)) {
     object name = char_name(char_code(obj));
-    fprintf(out,"[%c]",as_cint(char_code(obj)));
+    fprintf(out,"[%c]",(int)as_cint(char_code(obj)));
     if (!nullp(name)) {
       fputs("=#\\",out);
       string_out(out,name);
@@ -120,8 +120,8 @@ local void nobject_out1 (FILE* out, obje
     fputc(')',out);
   } else if (arrayp(obj)) {
     fprintf(out,"#<array %d",Array_type(obj));
-    if (mdarrayp(obj)) fprintf(out," rank=%d",Iarray_rank(obj));
-    else fprintf(out," len=%d",vector_length(obj));
+    if (mdarrayp(obj)) fprintf(out," rank=%" PRIul,Iarray_rank(obj));
+    else fprintf(out," len=%" PRIul,vector_length(obj));
     fprintf(out," 0x%lx>",as_oint(obj));
   } else if (functionp(obj)) {
     fputs("#<",out);
@@ -182,7 +182,7 @@ local void nobject_out1 (FILE* out, obje
     fputc(')',out);
   } else if (hash_table_p(obj)) {
     fputs("#(",out); XOUT(S(hash_table));
-    fprintf(out," size=%u maxcount=%u mincount=%u\n",
+    fprintf(out," size=%" PRIul " maxcount=%" PRIul " mincount=%" PRIul "\n",
             TheHashtable(obj)->ht_size,
             (uintL)posfixnum_to_V(TheHashtable(obj)->ht_maxcount),
             (uintL)posfixnum_to_V(TheHashtable(obj)->ht_mincount));
@@ -281,10 +281,10 @@ local void nobject_out1 (FILE* out, obje
       case DRIVER_frame_info: fputs("DRIVER",out); break;
       default: fputs("**UNKNOWN**",out);
     }
-    fprintf(out," %d>",STACK_item_count(uTheFramepointer(obj),
+    fprintf(out," %" PRIul ">",STACK_item_count(uTheFramepointer(obj),
                                         (gcv_object_t*)STACK_start));
   } else if (builtin_stream_p(obj)) {
-    fprintf(out,"#<built-in-stream type=%d flags=%d len=%d xlen=%d slen=%ld",
+    fprintf(out,"#<built-in-stream type=%d flags=%d len=%" PRIul " xlen=%" PRIul " slen=%zd",
             TheStream(obj)->strmtype,TheStream(obj)->strmflags,
             Stream_length(obj),Stream_xlength(obj),strm_len);
     switch (TheStream(obj)->strmtype) {
@@ -358,13 +358,13 @@ local int back_trace_depth (const struct
 /* print a single struct backtrace_t object
  the caller must do begin_system_call()/end_system_call() ! */
 local void bt_out (FILE* out, const struct backtrace_t *bt, uintL bt_index) {
-  fprintf(out,"[%d/0x%lx]%s ",bt_index,(uintP)bt,
+  fprintf(out,"[%" PRIul "/0x%lx]%s ",bt_index,(uintP)bt,
           bt_beyond_stack_p(bt,STACK)?"<":">");
   nobject_out(out,bt->bt_function);
   if (bt->bt_num_arg >= 0)
     fprintf(out," %d args",bt->bt_num_arg);
   if (bt->bt_next)
-    fprintf(out," delta: STACK=%ud; SP=%ld",
+    fprintf(out," delta: STACK=%" PRIul "; SP=%lu",
             STACK_item_count(top_of_back_trace_frame(bt),
                              top_of_back_trace_frame(bt->bt_next)),
             (((long)((char*)(bt->bt_next) - (char*)bt) ^ SPoffset) - SPoffset)
--- src/spvw_memfile.d.orig	2017-02-24 10:37:24.000000000 -0700
+++ src/spvw_memfile.d	2017-02-24 10:41:33.225732167 -0700
@@ -1817,7 +1817,7 @@ local void loadmem_from_handle (Handle h
               (uintL)posfixnum_to_V(header._dumptime.seconds));
     #endif
     char memdumptime[10+1];
-    sprintf(memdumptime,"%u",header._dumptime);
+    sprintf(memdumptime,"%" PRIul,header._dumptime);
     O(memory_image_timestamp) = ascii_to_string(memdumptime);
     O(memory_image_host) = asciz_to_string(header._dumphost,
                                            Symbol_value(S(utf_8)));
